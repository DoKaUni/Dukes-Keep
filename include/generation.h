#pragma once

#include <openssl/evp.h>
#include <openssl/rand.h>
#include <openssl/err.h>

#include <iostream>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <vector>
#include <string>
#include <ctime>
#include <unistd.h>

const int sectionLengths[] = {2,3,4,5,6,7,8};

const std::vector<std::vector<int>> passwordLengths = {
    {4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64},
    {6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63},
    {8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64},
    {10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60},
    {12, 18, 24, 30, 36, 42, 48, 54, 60},
    {14, 21, 28, 35, 42, 49, 56, 63},
    {16, 24, 32, 40, 48, 56, 64}
};

// Character set for the random string
const std::string characterSets[4] = {"abcdefghijklmnopqrstuvwxyz", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "0123456789", "!@#$%^&*()_-+=~`[]{}|;:,.<>?"};

// File to store the seed and fixed IV
const std::wstring seedFile = L"seed.bin";

/**
 * Handles and prints errors from the LibreSSL library.
 * 
 * This function retrieves the most recent error from the LibreSSL error queue and outputs it to the standard error stream.
 */
void handleErrors();

/**
 * Generates a specified number of random bytes.
 * 
 * @param buffer The buffer to store the generated random bytes.
 * @param length The number of random bytes to generate.
 * 
 * @return True if the bytes were successfully generated, False otherwise.
 */
bool GenerateRandomBytes(unsigned char* buffer, int length);

/**
 * Saves a random seed and fixed IV in binary format to a file.
 * 
 * @param seedPath The path to the file where the seed and IV should be saved.
 * @param seed The random seed to write to the file.
 * @param seedLength The length of the seed in bytes.
 * @param fixedIV The fixed initialization vector (IV) to write to the file.
 * @param ivLength The length of the IV in bytes.
 * @param key the encryption key used for encryption/decryption
 * 
 * @return True if the seed and IV were successfully saved to the file, False otherwise.
 */
bool SaveSeedAndIV(const std::string& seedPath, const unsigned char* seed, int seedLength, const unsigned char* fixedIV, int ivLength,const std::vector<unsigned char>& key);

/**
 * Loads a seed and fixed IV from a file or generates and saves new ones if not found.
 * 
 * @param seedPath The path to the file where the seed and IV are stored or will be saved.
 * @param seed The buffer to load the seed into.
 * @param seedLength The length of the seed in bytes.
 * @param fixedIV The buffer to load the IV into.
 * @param ivLength The length of the IV in bytes.
 * @param key the encryption key used for encryption/decryption
 * 
 * @return True if the seed and IV were successfully loaded, False otherwise.
 */
bool LoadSeedAndIV(const std::string& seedPath, unsigned char* seed, int seedLength, unsigned char* fixedIV, int ivLength, const std::vector<unsigned char>& key);

/**
 * Derives a cryptographic key from a seed and input string using SHA-256.
 * 
 * @param seed The seed to include in the key derivation process.
 * @param seedLength The length of the seed.
 * @param input The input string to use in key derivation.
 * @param key The buffer to store the derived key.
 * 
 * @return True if the key was successfully derived, False otherwise.
 */
bool DeriveKey(const unsigned char* seed, int seedLength, const std::string& input, unsigned char* key);

/**
 * Generates random bytes using AES-CTR with the provided key and IV.
 * 
 * @param key The key used for AES-CTR encryption.
 * @param iv The initialization vector (IV) used for AES-CTR.
 * @param output The buffer to store the generated random bytes.
 * @param outputLength The number of random bytes to generate.
 * 
 * @return True if the random bytes were successfully generated, False otherwise.
 */
bool GenerateRandomBytesWithIV(const unsigned char* key, const unsigned char* iv, unsigned char* output, int outputLength);

/**
 * Generates a random string using a specified character set.
 * 
 * @param outputLength The desired length of the generated string.
 * @param characterSet The set of characters to choose from when generating the string.
 * 
 * @return A random string of the specified length, or an empty string if an error occurred.
 */
std::string GenerateRandomString(int outputLength, const std::string& characterSet);

/**
 * Generates a random boolean value using a fixed key and IV, by generating a random byte and getting it's least significant bit.
 * 
 * @param key The key used for AES-CTR encryption.
 * @param fixedIV The fixed IV used for AES-CTR encryption.
 * 
 * @return True or False based on the least significant bit of the generated byte.
 */
bool GenerateRandomBoolean(const unsigned char* key, const unsigned char* fixedIV);

/**
 * Generates a list of random indexes using a key and IV.
 * 
 * @param count The number of random indexes to generate.
 * @param maxIndex The maximum possible value for the indexes.
 * @param key The key used for AES-CTR encryption.
 * @param IV The IV used for AES-CTR encryption.
 * 
 * @return A vector containing the randomly generated indexes.
 */
std::vector<int> GenerateRandomIndexes(int count, int maxIndex, const unsigned char* key, const unsigned char* IV);